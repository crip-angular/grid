!function(i,e){"use strict";e.grid=i.module("crip.grid",["crip.core","crip.grid.templates"])}(angular,window.crip||(window.crip={})),function(i,e){"use strict";e.grid.constant("cripGridEvents",{externallyChanged:"crip-grid-externally-changed",paginationChanged:"crip-grid-pagination-changed",filtersChanged:"crip-grid-filters-changed",dataChanged:"cript-grid-data-changed",sortChanged:"crip-grid-sort-changed"})}(angular,window.crip||(window.crip={})),function(i,e){"use strict";e.grid.constant("cripPaginationConfig",{maxSize:5,boundaryLinks:!0,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last"})}(angular,window.crip||(window.crip={})),function(i,e){"use strict";function n(i){function e(i,e){return e.templateUrl||"/crip/grid/per-page.html"}function n(e,n,r,t){e.selected=parseInt(e.cripGridPerPage.pagination.perPage,10)||i.getDefaultPerPageOption(),e.options=e.cripGridPerPage.pagination.pageSizes,e.$watch("selected",function(i){i!==e.cripGridPerPage.pagination.perPage&&(e.cripGridPerPage.pagination.perPage=i)})}return{restrict:"A",templateUrl:e,scope:{cripGridPerPage:"=",cripClass:"@"},replace:!1,transclude:!0,link:n}}e.grid.directive("cripGridPerPage",n),n.$inject=["cripGridConfig"]}(angular,window.crip||(window.crip={})),function(i,e){"use strict";function n(){function i(i,e){return e.templateUrl||"/crip/grid/th.html"}function e(i,e,n,r){i.cripTitle||(i.cripTitle=i.cripText),e.addClass("crip-grid th").find("a").on("click",function(){this.blur()})}return{restrict:"A",templateUrl:i,scope:{cripGridTh:"=",cripText:"@",cripName:"@",cripTitle:"@"},replace:!1,transclude:!0,link:e}}e.grid.directive("cripGridTh",n),n.$inject=[]}(angular,window.crip||(window.crip={})),function(i,e){"use strict";function n(e){function n(i,e){return e.templateUrl||"/crip/grid/pagination.html"}function r(n,r,t,a){function c(i,e){e!=i&&(n.cripGridPagination.totalPages=o(),s())}function o(){var i=n.cripGridPagination.perPage<1?1:Math.ceil(n.cripGridPagination.total/n.cripGridPagination.perPage);return Math.max(i||0,1)}function s(){n.cripGridPagination.page=parseInt(n.cripGridPagination.page,10)||1,n.pages=g(n.cripGridPagination.page,n.cripGridPagination.totalPages,d("maxSize")),n.cripGridPagination.page>n.cripGridPagination.totalPages&&n.selectPage(n.cripGridPagination.totalPages)}function p(i,e,n){return{number:i,text:e,active:n}}function g(e,n,r){var t=[],a=1,c=n,o=i.isDefined(r)&&n>r;o&&(a=Math.ceil(e-r/2),a<Math.floor(r/2)&&(a=1),c=a+r-1,c>=n&&(c=n,a=n-r+1));for(var s=a;c>=s;s++){var g=p(s,s,s==e);t.push(g)}if(o&&r>0){if(a>1){var d=p(a-1,"...",!1);t.unshift(d)}if(n>c){var l=p(c+1,"...",!1);t.push(l)}}return t}function d(n){return i.isDefined(t[n])?t[n]:e[n]}c(0,1),n.pages=g(n.cripGridPagination.page,n.cripGridPagination.totalPages,d("maxSize")),n.selectPage=function(i,e){e&&e.preventDefault(),n.cripGridPagination.page!==i&&i>0&&i<=n.cripGridPagination.totalPages&&(e&&e.target&&e.target.blur(),n.cripGridPagination.page=i)},n.getText=function(i){return n[i+"Text"]||e[i+"Text"]},n.noPrevious=function(){return 1==n.cripGridPagination.page},n.noNext=function(){return n.cripGridPagination.page==n.cripGridPagination.totalPages},n.boundaryLinks=d("boundaryLinks"),n.directionLinks=d("directionLinks"),n.$watch("cripGridPagination.total",c),n.$watch("cripGridPagination.perPage",c),n.$watch("cripGridPagination.page",c)}return{restrict:"A",templateUrl:n,scope:{cripGridPagination:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@"},replace:!1,transclude:!0,link:r}}e.grid.directive("cripGridPagination",n),n.$inject=["cripPaginationConfig"]}(angular,window.crip||(window.crip={})),function(i,e,n){"use strict";function r(n,r,t,a){function c(c){function d(i){var e="asc"===$.sort.direction?"desc":"asc";i!==$.sort.field&&(e=$.sort.direction),c.scope.$broadcast(a.sortChanged,{field:i,direction:e,name:$.name}),$.sort.direction=e,$.sort.field=i}function l(i){return i===$.sort.field&&"asc"===$.sort.direction}function u(i){return i===$.sort.field&&"desc"===$.sort.direction}function f(i,e){c.scope.$broadcast(a.dataChanged,{data:i,total:e,name:$.name}),$.data=i,$.pagination.total=e,c.scope.$$phase||c.scope.$apply()}function P(e,n){var r=i.copy($.filters),a=o(r),c=t.getRequestMappings(),s={};return n&&i.extend(a,n),s[c.page]=$.pagination.page,s[c.perPage]=$.pagination.perPage,s[c.direction]=$.sort.direction,s[c.order]=$.sort.field,s[c.filters]=i.toJson(a),e&&i.extend(s,e),s}function h(i){s(i)&&!$.loading&&(c.scope.$broadcast(a.filtersChanged,{filters:$.filters,name:$.name}),c.paginate(a.filtersChanged,{event:i,filters:$.filters,grid:$.name}))}function w(i){s(i)&&!$.loading&&($.filters={},h(i))}function m(n,r){r.name===c.name&&i.forEach(r,function(n,r){if("filters"===r){var t=e.keys($[r]),a=e.keys(n),c=t.diff(a);if(c.length>0)for(var o in c)c.hasOwnProperty(o)&&delete $[r][c[o]]}i.isObject(n)?i.forEach(n,function(e,n){i.isString(e)&&($[r][n]=e)}):i.isString(n)&&($[r]=n)})}function G(e,n){g(e,n)&&(i.extend(e,{name:$.name}),c.scope.$broadcast(a.sortChanged,e),c.paginate(a.sortChanged,{"new":e,old:n}))}function x(e,n){p(e,n)&&(i.extend(e,{name:$.name}),c.scope.$broadcast(a.paginationChanged,e),c.paginate(a.paginationChanged,{"new":e,old:n}))}function v(e,n){t.updateOnFilterChange&&!i.equals(e,n)&&h(!0)}if(!i.isDefined(c.scope))throw new Error("cripGrid parameters should contain `scope` property to extend!");if(!(i.isDefined(c.scope.$broadcast)&&i.isFunction(c.scope.$broadcast)&&i.isDefined(c.scope.$watch)&&i.isFunction(c.scope.$watch)))throw new Error("cripGrid parameter `scope` should contain `$broadcast` and `$watch` methods to communicate with other parts of code in core!");if(!i.isDefined(c.paginate)||!i.isFunction(c.paginate))throw new Error("cripGrid parameters should contain `paginate` method to call new page content!");i.isDefined(c.name)||(c.name=r["new"]()),i.extend(c.scope,{grid:{loading:!1,name:c.name,sort:{field:"id",direction:"desc"},pagination:{page:1,total:0,perPage:t.getDefaultPerPageOption(),pageSizes:t.getPerPageOptions()},filters:{},showFilters:!1,data:[],sortBy:d,filter:h,isAscFor:l,isDescFor:u,setPageData:f,clearFilters:w,requestParams:P}});var $=c.scope.grid;c.scope.$on(a.externallyChanged,m),c.scope.$watch("grid.sort",G,!0),c.scope.$watch("grid.filters",v,!0),c.scope.$watch("grid.pagination",x,!0);var C=t.getPlugins()||{};i.isDefined(c.plugins)&&i.extend(C,c.plugins),i.forEach(C,function(i,e){var r=n.get(e);r.extend({scope:c.scope,paginate:c.paginate,name:c.name,plugins:i})}),$.showFilters=!!e.keys($.filters).length||$.showFilters}function o(i){var e=[];for(var n in i)i.hasOwnProperty(n)&&e.push([n,i[n]]);return e}function s(i){return i===!0||"click"===i.type||"submit"===i.type||"keypress"===i.type&&13===i.keyCode}function p(i,e){return i!==e&&(parseInt(i.page)!==parseInt(e.page)||parseInt(i.perPage)!==parseInt(e.perPage))}function g(i,e){return i!==e&&(i.direction!==e.direction||i.field!==e.field)}return{extend:c}}n.grid.factory("cripGrid",r),r.$inject=["$injector","cripStrRandom","cripGridConfig","cripGridEvents"]}(angular,Object,window.crip||(window.crip={})),function(i,e){"use strict";function n(){function e(){return{getPlugins:n,getRequestMappings:t,getPerPageOptions:c,getDefaultPerPageOption:o,updateOnFilterChange:u.updateOnFilterChange}}function n(){return p}function r(e){return p=i.copy(e)}function t(){return g}function a(i,e,n,r,t){return g={page:i||"page",perPage:e||"per-page",direction:n||"direction",order:r||"order",filters:t||"filters"}}function c(){return l}function o(){return d}function s(e){if(i.isArray(e)&&e.length>0)return d=e[0],l=e;throw new Error("per_page_options can be array from integers")}var p={},g=a(),d=10,l=[10,25,50],u=this;i.extend(u,{getPlugins:n,setPlugins:r,getRequestMappings:t,setRequestMappings:a,setPerPageOptions:s,updateOnFilterChange:!1}),this.$get=[e]}e.grid.provider("cripGridConfig",n),n.$inject=[]}(angular,window.crip||(window.crip={})),angular.module("crip.grid.templates",[]).run(["$templateCache",function(i){i.put("/crip/grid/pagination.html",'<ul class="pagination">\r\n    <li ng-if="::boundaryLinks"\r\n        ng-class="{disabled: noPrevious()}"\r\n        class="pagination-first">\r\n        <a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a>\r\n    </li>\r\n\r\n    <li ng-if="::directionLinks"\r\n        ng-class="{disabled: noPrevious()}"\r\n        class="pagination-prev">\r\n        <a href ng-click="selectPage(cripGridPagination.page - 1, $event)">{{::getText(\'previous\')}}</a>\r\n    </li>\r\n\r\n    <li ng-repeat="page in pages"\r\n        ng-class="{active: page.active}"\r\n        class="pagination-page">\r\n        <a href ng-click="selectPage(page.number, $event)">{{page.text}}</a>\r\n    </li>\r\n\r\n    <li ng-if="::directionLinks"\r\n        ng-class="{disabled: noNext()}"\r\n        class="pagination-next">\r\n        <a href ng-click="selectPage(cripGridPagination.page + 1, $event)">{{::getText(\'next\')}}</a>\r\n    </li>\r\n\r\n    <li ng-if="::boundaryLinks"\r\n        ng-class="{disabled: noNext()}"\r\n        class="pagination-last">\r\n        <a href ng-click="selectPage(cripGridPagination.totalPages, $event)">{{::getText(\'last\')}}</a>\r\n    </li>\r\n</ul>'),i.put("/crip/grid/per-page.html",'<span ng-transclude></span>\r\n<select class="c-per-page form-control {{cripClass}}"\r\n        ng-model="selected"\r\n        ng-options="size as size for size in options"></select>'),i.put("/crip/grid/th.html",'<a href title="{{cripTitle}}"\r\n   ng-click="cripGridTh.sortBy(cripName)">\r\n    <i class="crip-icon fa pull-right"\r\n       ng-class="{\'fa-sort-desc\': cripGridTh.isDescFor(cripName),\r\n                  \'fa-sort-asc\': cripGridTh.isAscFor(cripName)}"></i> <span ng-transclude></span>\r\n</a>')}]);
//# sourceMappingURL=data:application/json;base64,
